name: Deploy MkDocs site (auto-sync projects)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main site
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mkdocs-material mkdocs-minify-plugin pyyaml requests

      - name: Fetch projects and generate pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'PYCODE'
          import yaml, os, requests, textwrap

          os.makedirs('docs/projects', exist_ok=True)

          with open('projects.yml', 'r') as f:
              cfg = yaml.safe_load(f)

          project_nav = []
          landing_lines = ["# Projects\n"]

          for proj in cfg.get('projects', []):
              name = proj['name']
              filename = None
              description = ""

              if 'repo' in proj:
                  # --- Repo-based project ---
                  repo = proj['repo']
                  branch = proj.get('branch', 'main')
                  filename = repo.split('/')[-1] + '.md'
                  print(f"Fetching {repo}...")

                  # Fetch README.md
                  url = f"https://raw.githubusercontent.com/{repo}/{branch}/README.md"
                  r_readme = requests.get(url, headers={'Authorization': f'token {os.getenv("GITHUB_TOKEN")}'}).text
                  
                  if r_readme:
                      # Fix relative image and file paths
                      repo_path = f"https://raw.githubusercontent.com/{repo}/{branch}/"
                      r_readme = r_readme.replace("](./", f"]({repo_path}")
                      r_readme = r_readme.replace("](images/", f"]({repo_path}images/")
                      r_readme = r_readme.replace("github.com/", "raw.githubusercontent.com/").replace("/blob/", "/")

                      if not r_readme.startswith('#'):
                          r_readme = f"# {name}\n\n" + r_readme

                      with open(f'docs/projects/{filename}', 'w', encoding='utf-8') as out:
                          out.write(r_readme)

                  # Fetch GitHub repo description
                  api_url = f"https://api.github.com/repos/{repo}"
                  r_info = requests.get(api_url, headers={'Authorization': f'token {os.getenv("GITHUB_TOKEN")}'}).json()
                  description = r_info.get('description', 'No description provided.')

              elif 'file' in proj:
                  # --- Local Markdown project ---
                  filename = os.path.basename(proj['file'])
                  if os.path.exists(proj['file']):
                      os.system(f"cp {proj['file']} docs/projects/{filename}")
                  else:
                      print(f"⚠️ Local file not found: {proj['file']}")
                  description = proj.get('description', 'No description provided.')

              else:
                  print(f"⚠️ Skipping {name} (no repo or file specified)")
                  continue

              # Add entry to navigation and landing page
              project_nav.append({name: f"projects/{filename}"})
              landing_lines.append(textwrap.dedent(f"""
              ## [{name}](projects/{filename})

              {description}

              ---
              """))

          # Write projects_nav.yml for mkdocs.yml include
          with open('projects_nav.yml', 'w', encoding='utf-8') as navfile:
              yaml.dump(project_nav, navfile, sort_keys=False, allow_unicode=True)

          # Write projects.md (landing page)
          with open('docs/projects.md', 'w', encoding='utf-8') as landing:
              landing.write('\n'.join(landing_lines))

          PYCODE

      - name: Build site
        run: mkdocs build --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site