name: Deploy MkDocs site (auto-sync projects)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main site
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mkdocs-material mkdocs-minify-plugin pyyaml requests

      - name: Fetch project READMEs and update mkdocs nav
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'PYCODE'
          import yaml, os, requests

          # Ensure projects folder exists
          os.makedirs('docs/projects', exist_ok=True)

          # Load projects.yml
          with open('projects.yml', 'r') as f:
              cfg = yaml.safe_load(f)

          # Load mkdocs.yml
          with open('mkdocs.yml', 'r', encoding='utf-8') as f:
              mkdocs_cfg = yaml.safe_load(f)

          project_nav = []

          for proj in cfg.get('projects', []):
              repo = proj['repo']
              branch = proj.get('branch', 'main')
              name = proj['name']
              filename = repo.split('/')[-1] + '.md'

              print(f"Fetching {repo}...")
              url = f"https://raw.githubusercontent.com/{repo}/{branch}/README.md"
              r = requests.get(url, headers={'Authorization': f'token {os.getenv("GITHUB_TOKEN")}'}).text

              if r:
                  content = r
                  if not content.startswith('#'):
                      content = f"# {name}\n\n" + content
                  with open(f'docs/projects/{filename}', 'w', encoding='utf-8') as out:
                      out.write(content)
                  project_nav.append({name: f"projects/{filename}"})
              else:
                  print(f"⚠️ Could not fetch {repo}")

          # Inject project pages into nav
          new_nav = []
          for item in mkdocs_cfg['nav']:
              if 'Projects' in item:
                  new_nav.append({'Projects': project_nav})
              else:
                  new_nav.append(item)
          mkdocs_cfg['nav'] = new_nav

          # Write back modified mkdocs.yml
          with open('mkdocs.yml', 'w', encoding='utf-8') as f:
              yaml.dump(mkdocs_cfg, f, sort_keys=False)
          PYCODE

      - name: Build site
        run: mkdocs build --clean

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
