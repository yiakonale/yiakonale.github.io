name: Deploy MkDocs site (auto-sync projects)

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️ Checkout the site repository
      - name: Checkout main site
        uses: actions/checkout@v4

      # 2️ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3️ Install dependencies
      - name: Install dependencies
        run: |
          pip install mkdocs-material mkdocs-minify-plugin pyyaml requests

      # 4️ Fetch project READMEs, repo descriptions, generate nav and landing page
      - name: Fetch projects and generate landing page
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'PYCODE'
          import yaml, os, requests

          os.makedirs('docs/projects', exist_ok=True)

          # Load list of projects
          with open('projects.yml', 'r') as f:
              cfg = yaml.safe_load(f)

          # Load mkdocs.yml
          with open('mkdocs.yml', 'r', encoding='utf-8') as f:
              mkdocs_cfg = yaml.safe_load(f)

          project_nav = []
          landing_lines = ["# Projects\n\n"]

          for proj in cfg.get('projects', []):
              repo = proj['repo']
              branch = proj.get('branch', 'main')
              name = proj['name']
              filename = repo.split('/')[-1] + '.md'

              print(f"Fetching {repo}...")

              # 1️ Fetch README.md
              url = f"https://raw.githubusercontent.com/{repo}/{branch}/README.md"
              r_readme = requests.get(url, headers={'Authorization': f'token {os.getenv("GITHUB_TOKEN")}'}).text

              # Fix image URLs (convert relative or blob URLs to raw URLs)
              if r_readme:
                repo_path = f"https://raw.githubusercontent.com/{repo}/{branch}/"
                # Replace relative image paths (like ![](images/...))
                r_readme = r_readme.replace("](./", f"]({repo_path}")
                r_readme = r_readme.replace("](images/", f"]({repo_path}images/")
                # Replace GitHub blob links with raw links
                r_readme = r_readme.replace("github.com/", "raw.githubusercontent.com/").replace("/blob/", "/")


              if r_readme:
                  content = r_readme
                  if not content.startswith('#'):
                      content = f"# {name}\n\n" + content
                  with open(f'docs/projects/{filename}', 'w', encoding='utf-8') as out:
                      out.write(content)
              else:
                  print(f"⚠️ Could not fetch README for {repo}")
                  content = f"# {name}\n\nNo README found."

              # 2️ Fetch repo description from GitHub API
              api_url = f"https://api.github.com/repos/{repo}"
              r_info = requests.get(api_url, headers={'Authorization': f'token {os.getenv("GITHUB_TOKEN")}'}).json()
              description = r_info.get('description', 'No description provided.')

              # 3️ Add to project nav
              project_nav.append({name: f"projects/{filename}"})

              # 4️ Add entry to landing page
              landing_lines.append(f"## [{name}](projects/{filename})\n\n")
              landing_lines.append(f"{description}\n\n")

          # Write projects landing page
          with open('docs/projects.md', 'w', encoding='utf-8') as f:
              f.write('\n'.join(landing_lines))

          # Inject projects into nav
          new_nav = []
          for item in mkdocs_cfg['nav']:
              if 'Projects' in item:
                  # Landing page first, then individual project pages
                  new_nav.append({'Projects': [{'Projects Index': 'projects.md'}] + project_nav})
              else:
                  new_nav.append(item)

          mkdocs_cfg['nav'] = new_nav

          # Save modified mkdocs.yml
          with open('mkdocs.yml', 'w', encoding='utf-8') as f:
              yaml.dump(mkdocs_cfg, f, sort_keys=False)
          PYCODE

      # 5️ Build the site
      - name: Build site
        run: mkdocs build --clean

      # 6️ Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
